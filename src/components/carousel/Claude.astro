---
// Carousel Slider Component
interface SliderItem {
  image: string;
  alt: string;
}

interface Props {
  items: SliderItem[];
}

const { items } = Astro.props;
---

<div class="carousel-container">
  <div class="carousel-track bg-red-500">
    {items.map((item, index) => (
      <div class="carousel-item" data-index={index}>
        <img src={item.image} alt={item.alt} />
      </div>
    ))}
  </div>
</div>

<style>
.carousel-container {
  width: 250px; /* 5 * 50px */
  height: 300px;
  overflow: hidden;
  position: relative;
}

.carousel-track {
  display: flex;
  transition: transform 0.5s ease;
  height: 100%;
}

.carousel-item {
  flex: 0 0 50px;
  height: 250px; /* Default height */
  opacity: 0.6;
  transition: all 0.3s ease;
  filter: brightness(0.8);
}

.carousel-item:nth-child(3) {
  height: 300px; /* Middle item is slightly larger */
  opacity: 1;
  filter: brightness(1);
}

img {
  width: 50px !important;
  height: 50px !important;
  object-fit: cover;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const track = document.querySelector<HTMLElement>('.carousel-track');
  const items = document.querySelectorAll('.carousel-item');
  let currentIndex = 0;

  function shiftCarousel() {
    currentIndex = (currentIndex + 1) % items.length;
    const offset = -currentIndex * 50; // 50px per item
    if (track && track.style) {
        track.style.transform = `translateX(${offset}px)`;
    } else {
        alert('no existe')
    }
  }

  // Shift carousel every 3 seconds
  setInterval(shiftCarousel, 3000);
});
</script>